// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/timeline/v1/timeline.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TimelineClient is the client API for Timeline service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimelineClient interface {
	// c2c 发送消息请求
	Send(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageReply, error)
	// c2g 发送消息请求
	SendGroup(ctx context.Context, in *SendGroupRequest, opts ...grpc.CallOption) (*SendGroupReply, error)
	// 同步消息请求
	GetSyncMessage(ctx context.Context, in *SyncMessageRequest, opts ...grpc.CallOption) (*SyncMessageReply, error)
	// 查询单聊历史消息请求
	GetSingleHistoryMessage(ctx context.Context, in *GetSingleHistoryMessageRequest, opts ...grpc.CallOption) (*GetSingleHistoryMessageReply, error)
	// 查询群历史消息请求
	GetGroupHistoryMessage(ctx context.Context, in *GetGroupHistoryMessageRequest, opts ...grpc.CallOption) (*GetGroupHistoryMessageReply, error)
}

type timelineClient struct {
	cc grpc.ClientConnInterface
}

func NewTimelineClient(cc grpc.ClientConnInterface) TimelineClient {
	return &timelineClient{cc}
}

func (c *timelineClient) Send(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageReply, error) {
	out := new(SendMessageReply)
	err := c.cc.Invoke(ctx, "/timeline.v1.Timeline/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timelineClient) SendGroup(ctx context.Context, in *SendGroupRequest, opts ...grpc.CallOption) (*SendGroupReply, error) {
	out := new(SendGroupReply)
	err := c.cc.Invoke(ctx, "/timeline.v1.Timeline/SendGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timelineClient) GetSyncMessage(ctx context.Context, in *SyncMessageRequest, opts ...grpc.CallOption) (*SyncMessageReply, error) {
	out := new(SyncMessageReply)
	err := c.cc.Invoke(ctx, "/timeline.v1.Timeline/GetSyncMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timelineClient) GetSingleHistoryMessage(ctx context.Context, in *GetSingleHistoryMessageRequest, opts ...grpc.CallOption) (*GetSingleHistoryMessageReply, error) {
	out := new(GetSingleHistoryMessageReply)
	err := c.cc.Invoke(ctx, "/timeline.v1.Timeline/GetSingleHistoryMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timelineClient) GetGroupHistoryMessage(ctx context.Context, in *GetGroupHistoryMessageRequest, opts ...grpc.CallOption) (*GetGroupHistoryMessageReply, error) {
	out := new(GetGroupHistoryMessageReply)
	err := c.cc.Invoke(ctx, "/timeline.v1.Timeline/GetGroupHistoryMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimelineServer is the server API for Timeline service.
// All implementations must embed UnimplementedTimelineServer
// for forward compatibility
type TimelineServer interface {
	// c2c 发送消息请求
	Send(context.Context, *SendMessageRequest) (*SendMessageReply, error)
	// c2g 发送消息请求
	SendGroup(context.Context, *SendGroupRequest) (*SendGroupReply, error)
	// 同步消息请求
	GetSyncMessage(context.Context, *SyncMessageRequest) (*SyncMessageReply, error)
	// 查询单聊历史消息请求
	GetSingleHistoryMessage(context.Context, *GetSingleHistoryMessageRequest) (*GetSingleHistoryMessageReply, error)
	// 查询群历史消息请求
	GetGroupHistoryMessage(context.Context, *GetGroupHistoryMessageRequest) (*GetGroupHistoryMessageReply, error)
	mustEmbedUnimplementedTimelineServer()
}

// UnimplementedTimelineServer must be embedded to have forward compatible implementations.
type UnimplementedTimelineServer struct {
}

func (UnimplementedTimelineServer) Send(context.Context, *SendMessageRequest) (*SendMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedTimelineServer) SendGroup(context.Context, *SendGroupRequest) (*SendGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGroup not implemented")
}
func (UnimplementedTimelineServer) GetSyncMessage(context.Context, *SyncMessageRequest) (*SyncMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncMessage not implemented")
}
func (UnimplementedTimelineServer) GetSingleHistoryMessage(context.Context, *GetSingleHistoryMessageRequest) (*GetSingleHistoryMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleHistoryMessage not implemented")
}
func (UnimplementedTimelineServer) GetGroupHistoryMessage(context.Context, *GetGroupHistoryMessageRequest) (*GetGroupHistoryMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupHistoryMessage not implemented")
}
func (UnimplementedTimelineServer) mustEmbedUnimplementedTimelineServer() {}

// UnsafeTimelineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimelineServer will
// result in compilation errors.
type UnsafeTimelineServer interface {
	mustEmbedUnimplementedTimelineServer()
}

func RegisterTimelineServer(s grpc.ServiceRegistrar, srv TimelineServer) {
	s.RegisterService(&Timeline_ServiceDesc, srv)
}

func _Timeline_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimelineServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timeline.v1.Timeline/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimelineServer).Send(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timeline_SendGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimelineServer).SendGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timeline.v1.Timeline/SendGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimelineServer).SendGroup(ctx, req.(*SendGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timeline_GetSyncMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimelineServer).GetSyncMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timeline.v1.Timeline/GetSyncMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimelineServer).GetSyncMessage(ctx, req.(*SyncMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timeline_GetSingleHistoryMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleHistoryMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimelineServer).GetSingleHistoryMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timeline.v1.Timeline/GetSingleHistoryMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimelineServer).GetSingleHistoryMessage(ctx, req.(*GetSingleHistoryMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timeline_GetGroupHistoryMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupHistoryMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimelineServer).GetGroupHistoryMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timeline.v1.Timeline/GetGroupHistoryMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimelineServer).GetGroupHistoryMessage(ctx, req.(*GetGroupHistoryMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Timeline_ServiceDesc is the grpc.ServiceDesc for Timeline service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Timeline_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "timeline.v1.Timeline",
	HandlerType: (*TimelineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Timeline_Send_Handler,
		},
		{
			MethodName: "SendGroup",
			Handler:    _Timeline_SendGroup_Handler,
		},
		{
			MethodName: "GetSyncMessage",
			Handler:    _Timeline_GetSyncMessage_Handler,
		},
		{
			MethodName: "GetSingleHistoryMessage",
			Handler:    _Timeline_GetSingleHistoryMessage_Handler,
		},
		{
			MethodName: "GetGroupHistoryMessage",
			Handler:    _Timeline_GetGroupHistoryMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/timeline/v1/timeline.proto",
}
