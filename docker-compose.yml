#
# docker compose 服务编排
#

version: '3.4'

services:
  timeline:
    container_name: go-timeline
    build: # 指定从dockerfile编译
      context: .
      dockerfile: ./Dockerfile
    volumes:
      - ./configs:/data/conf
    environment:
      - TZ=Asia/Shanghai
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
    networks:
      - timeline
    ports:
      - "9321:8000"
      - "9322:9000"
  mongo:
    image: 'mongo:4.4.16'
    container_name: tl_mongo
    restart: on-failure
    volumes:
      - im_mongo_data:/data/db
      - im_mongo_data:/data/configdb
    ports:
      - '27017:27017'
    networks:
      - timeline
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=123456
  redis:
    build: deploy/redis
    container_name: tl_redis
    restart: on-failure
    volumes:
      - im_redis_data:/data  # 持久化数据，其他如密码等，在redis.conf里已配置
    networks:
      - timeline
    ports:
      - "6379:6379"     # 端口改掉，预防攻击
volumes: # 声明使用的数据卷，不使用宿主机目录，可以自行更改
  im_mysql_data:
    driver: local
  im_redis_data:
    driver: local
  im_mongo_data:
    driver: local
# 为了简单，使用默认侨接网络 + DNS连接内部服务器方式
# 根据https://docs.docker.com/compose/networking/，docker compose默认创建了网络，但是创建自己的侨接网络更安全
# 另外一个Host主机网络只支持Linux，虽然性能更高
networks:
  timeline:
    driver: bridge # 侨接网络，此时需要使用host访问（service下面的服务名）
    ipam: # see: https://docs.docker.com/compose/compose-file/compose-file-v3/#network
      config:
        - subnet: 173.16.0.0/24
          gateway: 173.16.0.1